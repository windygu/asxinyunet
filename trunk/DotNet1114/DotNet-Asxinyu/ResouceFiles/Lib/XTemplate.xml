<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XTemplate</name>
    </assembly>
    <members>
        <member name="T:XTemplate.Templating.TemplateContext">
            <summary>
            模版处理器会话
            </summary>
        </member>
        <member name="T:XTemplate.Templating.ITemplateContext">
            <summary>
            模版宿主。指令处理器可直接访问
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.Errors">
            <summary>
            编译错误集合
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.StandardAssemblyReferences">
            <summary>
            程序集引用列表
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.StandardImports">
            <summary>
            明明空间引用列表
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.TemplateFile">
            <summary>
            模版文件名
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:XTemplate.Templating.ITemplateContext.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:XTemplate.Templating.ITemplateContextInternal">
            <summary>
            上下文（仅供内部使用）
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.Assembly">
            <summary>程序集</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.Errors">
            <summary>编译错误集合</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.StandardAssemblyReferences">
            <summary>
            标准程序集引用
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.StandardImports">
            <summary>
            标准命名空间引用
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.TemplateFile">
            <summary>模版文件名</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.TemplatePath">
            <summary>模板目录</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.Context">
            <summary>上下文</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.Code">
            <summary>代码</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateContext.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:XTemplate.Templating.Block">
            <summary>
            代码块
            </summary>
        </member>
        <member name="M:XTemplate.Templating.Block.#ctor">
            <summary>
            实例化一个代码块对象
            </summary>
        </member>
        <member name="M:XTemplate.Templating.Block.#ctor(XTemplate.Templating.BlockType,System.String)">
            <summary>
            实例化一个代码块对象
            </summary>
            <param name="type"></param>
            <param name="text"></param>
        </member>
        <member name="P:XTemplate.Templating.Block.EndColumnNumber">
            <summary>
            结束列数
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.EndLineNumber">
            <summary>
            结束行数
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.StartColumnNumber">
            <summary>
            开始列数
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.StartLineNumber">
            <summary>
            开始行数
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Block.Type">
            <summary>
            块类型
            </summary>
        </member>
        <member name="T:XTemplate.Templating.TemplateParser">
            <summary>
            模版分析器
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.Parse(System.String,System.String)">
            <summary>
            把模版分割成块
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.InsertPosition(System.Collections.Generic.List{XTemplate.Templating.Block})">
            <summary>
            插入位置信息
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.StripEscapeCharacters(System.Collections.Generic.List{XTemplate.Templating.Block})">
            <summary>
            对编码的字符进行解码
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.CheckBlockSequence(System.Collections.Generic.List{XTemplate.Templating.Block})">
            <summary>
            检查块顺序是否有问题
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.ParseDirectiveBlock(XTemplate.Templating.Block)">
            <summary>
            分析指令块
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.StripExtraNewlines(System.Collections.Generic.List{XTemplate.Templating.Block})">
            <summary>
            删除多余的换行
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateParser.ValidateDirectiveString(XTemplate.Templating.Block)">
            <summary>
            验证指令字符串格式是否正确
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="T:XTemplate.Templating.Template">
            <summary>
            模版引擎
            </summary>
            <remarks>
            模版引擎分为快速用法和增强用法两种，其中增强用法可用于对模版处理的全程进行干预。
            一个模版引擎实例，可用重复使用以处理多个模版。
            </remarks>
            <example>
            快速用法：
            <code>
            Dictionary&lt;String, Object&gt; data = new Dictionary&lt;String, Object&gt;();
            data["name"] = "参数测试";
            String content = Template.Process("模版文件.txt", data);
            </code>
            增强用法：
            <code>
            Template tt = new Template();
            tt.Parse("模版文件.txt");
            tt.Context.Data["name"] = "参数测试";
            tt.Compile(host);
            TemplateBase temp = tt.CreateInstance(host);
            return temp.Render();
            </code>
            </example>
        </member>
        <member name="M:XTemplate.Templating.Template.Process(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            通过指定模版文件和传入模版的参数处理模版，返回结果
            </summary>
            <remarks>
            该方法是处理模版的快速方法，把分析、编译和运行三步集中在一起。
            带有缓存，避免重复分析模版。
            </remarks>
            <example>
            快速用法：
            <code>
            Dictionary&lt;String, Object&gt; data = new Dictionary&lt;String, Object&gt;();
            data["name"] = "参数测试";
            String content = TextTemplate.Process("模版文件.txt", data);
            </code>
            </example>
            <param name="templateFile">模版文件</param>
            <param name="data">传入模版的参数，模版中可以使用Data[名称]获取</param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.Parse(System.String)">
            <summary>
            处理模版
            </summary>
            <param name="templateFile">模版文件名</param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.Parse(System.String[],System.String[])">
            <summary>
            分析模版集合，外部传入模版名称集合和内容集合
            </summary>
            <param name="names"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.Parse(XTemplate.Templating.ITemplateContext,XTemplate.Templating.ITemplateContextInternal,System.String,System.String,System.String)">
            <summary>
            处理模版实现
            </summary>
            <param name="context"></param>
            <param name="context2"></param>
            <param name="content"></param>
            <param name="className"></param>
            <param name="classNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.ProcessDirectives(System.Collections.Generic.List{XTemplate.Templating.Block},System.String,XTemplate.Templating.ITemplateContextInternal)">
            <summary>
            处理指令
            </summary>
            <param name="blocks"></param>
            <param name="templateFile"></param>
            <param name="context"></param>
            <returns>返回指令集合</returns>
        </member>
        <member name="M:XTemplate.Templating.Template.Compile">
            <summary>
            编译运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.CreateInstance">
            <summary>
            创建模版实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.Render">
            <summary>
            运行代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.Template.WriteLog(System.String)">
            <summary>
            输出日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XTemplate.Templating.Template.WriteLog(System.String,System.Object[])">
            <summary>
            输出日志
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:XTemplate.Templating.Template.ContextInternal">
            <summary>上下文</summary>
        </member>
        <member name="P:XTemplate.Templating.Template.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Template.Debug">
            <summary>
            是否调试
            </summary>
        </member>
        <member name="T:XTemplate.Templating.BlockType">
            <summary>
            代码块类型
            </summary>
        </member>
        <member name="F:XTemplate.Templating.BlockType.Directive">
            <summary>
            指令
            </summary>
        </member>
        <member name="F:XTemplate.Templating.BlockType.Member">
            <summary>
            成员
            </summary>
        </member>
        <member name="F:XTemplate.Templating.BlockType.Text">
            <summary>
            模版文本
            </summary>
        </member>
        <member name="F:XTemplate.Templating.BlockType.Statement">
            <summary>
            语句
            </summary>
        </member>
        <member name="F:XTemplate.Templating.BlockType.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="T:XTemplate.Templating.TemplateBase">
            <summary>
            模版基类，所有模版继承自该类
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.#ctor">
            <summary>
            实例化一个模版
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.ClearIndent">
            <summary>
            清除缩进
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.RemoveIndent">
            <summary>
            弹出缩进
            </summary>
            <returns></returns>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.AddIndent(System.String)">
            <summary>
            压入缩进
            </summary>
            <param name="indent"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Warning(System.String)">
            <summary>
            警告
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.WriteInternal(System.String)">
            <summary>
            写入文本
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Write(System.Object)">
            <summary>
            写入文本
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Write(System.String,System.Object[])">
            <summary>
            写入文本
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.WriteLine(System.Object)">
            <summary>
            写入文本
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            写入行
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateBase.Render">
            <summary>
            转换文本
            </summary>
            <returns></returns>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.CurrentIndent">
            <summary>
            当前缩进
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.indentLengths">
            <summary>
            缩进长度集合
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.Errors">
            <summary>
            错误集合
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.Context">
            <summary>上下文</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateBase.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:XTemplate.Templating.TemplateException">
            <summary>
            模版异常
            </summary>
        </member>
        <member name="M:XTemplate.Templating.TemplateException.#ctor(System.String)">
            <summary>
            实例化一个模版处理异常
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XTemplate.Templating.TemplateException.#ctor(XTemplate.Templating.Block,System.String)">
            <summary>
            实例化一个模版处理异常
            </summary>
            <param name="block"></param>
            <param name="message"></param>
        </member>
        <member name="P:XTemplate.Templating.TemplateException.Block">
            <summary>代码块</summary>
        </member>
        <member name="P:XTemplate.Templating.TemplateException.Error">
            <summary>
            编译器错误
            </summary>
        </member>
        <member name="T:XTemplate.Templating.Directive">
            <summary>
            指令
            </summary>
        </member>
        <member name="M:XTemplate.Templating.Directive.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},XTemplate.Templating.Block)">
            <summary>
            实例化一个指令对象
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
            <param name="block"></param>
        </member>
        <member name="P:XTemplate.Templating.Directive.Block">
            <summary>
            块
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Directive.Name">
            <summary>
            指令名
            </summary>
        </member>
        <member name="P:XTemplate.Templating.Directive.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
    </members>
</doc>
