//-----------------------------------------------------------------
// All Rights Reserved , Copyright (C) 2012 , Hairihan TECH, Ltd .
//-----------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;

using DotNet.Business;
using DotNet.Utilities;

public partial class ShowUserBill1 : BasePage
{
    private bool showAuditList = false;
    /// <summary>
    /// 是否显示批示
    /// </summary>
    public bool ShowAuditList
    {
        get
        {
            return this.showAuditList;
        }
        set
        {
            this.showAuditList = value;
        }
    }

    public string CategoryCode
    {
        get
        {
            return this.txtCategoryCode.Value;
        }
        set
        {
            this.txtCategoryCode.Value = value;
        }
    }

    public string ObjectId
    {
        get
        {
            return this.txtObjectId.Value;
        }
        set
        {
            this.txtObjectId.Value = value;
        }
    }

    public string CurrentId
    {
        get
        {
            return this.txtCurrentId.Value;
        }
        set
        {
            this.txtCurrentId.Value = value;
        }
    }

    private string iframeUrl = string.Empty;
    public string IframeUrl
    {
        get
        {
            return iframeUrl;
        }
        set
        {
            iframeUrl = value;
        }
    }

    #region private void GetParamters() 读取参数
    /// <summary>
    /// 读取参数
    /// </summary>
    private void GetParamters()
    {
        if (Page.Request["CategoryCode"] != null)
        {
            this.CategoryCode = Page.Request["CategoryCode"].ToString();
        }
        if (Page.Request["ObjectId"] != null)
        {
            this.ObjectId = Page.Request["ObjectId"].ToString();
        }
        if (Page.Request["Id"] != null)
        {
            this.CurrentId = Page.Request["Id"].ToString();
        }
        if (Page.Request["CurrentId"] != null)
        {
            this.CurrentId = Page.Request["CurrentId"].ToString();
        }
        if (Page.Request["ShowAuditList"] != null)
        {
            this.ShowAuditList = Page.Request["ShowAuditList"].ToString().Equals(true.ToString());
        }
    }
    #endregion

    /// <summary>
    /// 显示单据内容
    /// </summary>
    public void ShowDetails()
    {
        BaseWorkFlowCurrentEntity workFlowCurrentEntity = null;
        BaseWorkFlowCurrentManager workFlowCurrentManager = null;
        if (!string.IsNullOrEmpty(this.CurrentId))
        {
            workFlowCurrentManager = new BaseWorkFlowCurrentManager(this.WorkFlowDbHelper, this.UserInfo);
            workFlowCurrentEntity = workFlowCurrentManager.GetEntity(this.CurrentId);
            // 从模板表里有效状态区分,是否模板还是报表
            this.ObjectId = workFlowCurrentEntity.ObjectId;
            this.CategoryCode = workFlowCurrentEntity.CategoryCode;
            if (this.ShowAuditList)
            {
                this.ucAuditList.GetList(this.CurrentId);
            }
        }
        if (!string.IsNullOrEmpty(this.ObjectId))
        {
            UserBillManager userBillManager = new UserBillManager(this.WorkFlowDbHelper, this.UserInfo);
            BaseNewsEntity entity = userBillManager.GetEntity(this.ObjectId);
            if (entity != null)
            {
                this.CategoryCode = entity.CategoryCode;
                this.ObjectId = entity.Id;
                workFlowCurrentManager = new BaseWorkFlowCurrentManager(this.WorkFlowDbHelper, this.UserInfo);
                this.CurrentId = workFlowCurrentManager.GetCurrentId(this.CategoryCode, this.ObjectId);

                string templateSource = "html";
                if (entity != null && !string.IsNullOrEmpty(entity.Id))
                {
                    if (!string.IsNullOrEmpty(entity.Source))
                    {
                        templateSource = entity.Source;
                    }
                }
                if (templateSource.Equals("html"))
                {
                    this.HtmlBill.Visible = true;
                    this.HtmlBill.ShowDetails(this.ObjectId);

                    // this.IframeUrl = "<iframe width='100%' height='100%' frameborder='0' scrolling='auto' src='HtmlBill.aspx?ObjectId=" + this.ObjectId + "&ReadOnly=True&'></iframe>";
                    // this.IframeUrl = "<!-- #INCLUDE FILE=\"HtmlBill.aspx?ObjectId=" + this.ObjectId + "\" -->";
                }
                else
                {
                    this.OfficeBill.Visible = true;
                    this.OfficeBill.ShowDetails(this.ObjectId);

                    // this.IframeUrl = "<iframe width='100%' height='100%' frameborder='0' scrolling='auto' src='OfficeBill.aspx?ObjectId=" + this.ObjectId + "'></iframe>";
                    // this.IframeUrl = "<!-- #INCLUDE FILE=\"OfficeBill.aspx?ObjectId=" + this.ObjectId + "\" -->";
                }

                if (this.ShowAuditList)
                {
                    this.ucAuditList.GetList(this.CurrentId);
                }

                bool readOnly = false;
                if (Page.Request["ReadOnly"] != null)
                {
                    readOnly = true;
                }
                else
                {
                    if (entity.CreateUserId.Equals(this.UserInfo.Id))
                    {
                        if (string.IsNullOrEmpty(entity.AuditStatus)
                            || entity.AuditStatus.Equals(AuditStatus.Draft.ToString())
                            || entity.AuditStatus.Equals(AuditStatus.AuditReject.ToString()))
                        {
                            this.tbUser.Visible = true;
                            this.btnAutoStatr.Visible = true;
                            // 这里需要获取第一步审核的审核步骤信息
                            string workFlowCode = this.UserInfo.Id + "_" + this.CategoryCode;
                            // 这里控制，现实几个审核记录的功能才对。
                            BaseWorkFlowActivityManager workFlowActivityManager = new BaseWorkFlowActivityManager(this.WorkFlowDbHelper, this.UserInfo);
                            DataTable dtWorkFlowActivity = workFlowActivityManager.GetActivityDTByCode(workFlowCode);
                            this.ShowWorkFlowActivity(dtWorkFlowActivity);
                            /*
                            workFlowCurrentManager = new BaseWorkFlowCurrentManager(this.WorkFlowDbHelper, this.UserInfo); 
                            BaseWorkFlowActivityEntity workFlowActivityEntity = workFlowCurrentManager.GetFirstActivityEntity(workFlowCode);
                            if (workFlowActivityEntity != null)
                            {
                                if (workFlowActivityEntity.AuditUserId.Equals("Anyone"))
                                {
                                    this.ShowToUser();
                                    this.GetOrganizeTree();
                                }
                            }
                            */
                        }
                        else
                        {
                            readOnly = true;
                        }
                    }
                }
                if (readOnly)
                {
                    this.GetReportSignature();
                }
            }
        }
    }

    private DataTable GetReportSignatureDate(BaseWorkFlowCurrentEntity workFlowCurrentEntity)
    {
        DataTable signatureDateDT = null;
        if (!string.IsNullOrEmpty(workFlowCurrentEntity.Id))
        {
            BaseWorkFlowHistoryManager workFlowHistoryManager = new BaseWorkFlowHistoryManager(this.UserInfo);
            signatureDateDT = workFlowHistoryManager.GetDataTable(new KeyValuePair<string, object>(BaseWorkFlowHistoryTable.FieldCurrentFlowId, workFlowCurrentEntity.Id), BaseWorkFlowHistoryTable.FieldCreateOn + " DESC");
        }
        return signatureDateDT;
    }

    private string GetReportSignatureDate(DataTable signatureDateDT, string activityId, out string userId)
    {
        userId = string.Empty;
        string returnValue = string.Empty;
        if (signatureDateDT != null)
        {
            foreach (DataRow dataRow in signatureDateDT.Rows)
            {
                // if (dataRow[BaseWorkFlowHistoryTable.FieldAuditUserId].ToString().Equals(userId))
                if (dataRow[BaseWorkFlowHistoryTable.FieldActivityId].ToString().Equals(activityId))
                {
                    if (dataRow[BaseWorkFlowHistoryTable.FieldAuditStatus].ToString().Equals(AuditStatus.AuditPass.ToString())
                        || dataRow[BaseWorkFlowHistoryTable.FieldAuditStatus].ToString().Equals(AuditStatus.AuditComplete.ToString())
                        || dataRow[BaseWorkFlowHistoryTable.FieldAuditStatus].ToString().Equals(AuditStatus.WaitForAudit.ToString())
                        )
                    {
                        userId = dataRow[BaseWorkFlowHistoryTable.FieldAuditUserId].ToString();
                        returnValue = dataRow[BaseWorkFlowHistoryTable.FieldAuditDate].ToString();
                        break;
                    }
                }
            }
        }
        return returnValue;
    }

    public string UserSignatureDate1 = string.Empty;
    public string UserSignatureDate2 = string.Empty;
    public string UserSignatureDate3 = string.Empty;
    public string UserSignatureDate4 = string.Empty; 
    public string UserSignatureDate5 = string.Empty;
    public string UserSignatureDate6 = string.Empty;
    public string UserSignatureDate7 = string.Empty;
    public string UserSignatureDate8 = string.Empty;

    #region private void GetReportSignature()
    /// <summary>
    /// 获取报表签名
    /// </summary>
    private void GetReportSignature()
    {
        if (string.IsNullOrEmpty(this.CurrentId))
        {
            this.btnAutoStatr.Enabled = false;
            return;
        }
        BaseWorkFlowCurrentManager workFlowCurrentManager = new BaseWorkFlowCurrentManager(this.UserInfo);
        BaseWorkFlowCurrentEntity workFlowCurrentEntity = workFlowCurrentManager.GetEntity(this.CurrentId);
        // 通过当前的工作流主键,获得当前的审批流程主键
        BaseWorkFlowActivityManager workFlowActivityManager = new BaseWorkFlowActivityManager(this.UserInfo);
        // 通过审批步骤,获取当前的用户
        // 再看当前用户,有审批通过否?再能确认是否审核通过
        // 当前是审核到了第几步了.是否有被退回情况等,需要确认.
        DataTable dt = null;
        string userId = string.Empty;
        if (workFlowCurrentEntity.AuditStatus.Equals(AuditStatus.AuditPass.ToString())
            || workFlowCurrentEntity.AuditStatus.Equals(AuditStatus.WaitForAudit.ToString()))
        {
            dt = workFlowActivityManager.GetBackToDT(workFlowCurrentEntity);
        }
        else if (workFlowCurrentEntity.AuditStatus.Equals(AuditStatus.AuditComplete.ToString()))
        {
            dt = workFlowActivityManager.GetBackToDT(workFlowCurrentEntity.Id, workFlowCurrentEntity.WorkFlowId.ToString());
        }
        if (dt != null)
        {
            dt.Columns.Remove("Id");
            dt.Columns["ActivityId"].ColumnName = "Id";
            BaseBusinessLogic.SetFilter(dt, "Id", null, true);
        }
        if (dt != null)
        {
            DataTable signatureDateDT = GetReportSignatureDate(workFlowCurrentEntity);
            int userSignature = 0;
            string activityId = string.Empty;
            string userSignatureDate = string.Empty;
            userSignature = 1;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate1 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 2;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate2 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 3;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate3 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 4;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate4 = DateTime.Parse(userSignatureDate).ToString("yy-MM-dd");
                }
            }
            userSignature = 5;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate5 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 6;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate6 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 7;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate7 = DateTime.Parse(userSignatureDate).ToString("MM-dd HH:mm");
                }
            }
            userSignature = 8;
            if (dt.Rows.Count >= userSignature)
            {
                activityId = dt.Rows[userSignature - 1][BaseWorkFlowActivityEntity.FieldId].ToString();
                userSignatureDate = GetReportSignatureDate(signatureDateDT, activityId, out userId);
                if (!string.IsNullOrEmpty(userSignatureDate))
                {
                    UserSignatureDate8 = DateTime.Parse(userSignatureDate).ToString("yy-MM-dd");
                }
            }
        }
    }
    #endregion

    protected void Page_Load(object sender, EventArgs e)
    {
        // 应该是检查是否已登录
        if (!Page.IsPostBack)
        {
            this.GetParamters();
            this.ShowDetails();            
        }
    }

    /*
    private void ShowToUser()
    {
        this.lblDepartment.Visible = true;
        this.cmbDepartment01.Visible = true;
        this.lblUser.Visible = true;
        this.cmbUser01.Visible = true;
    }
    */

    #region private bool CheckInput()
    /// <summary>
    /// 检查输入的有效性
    /// </summary>
    /// <returns>有效</returns>
    private bool CheckInput()
    {
        bool returnValue = true;
        // 检查下一个审核人是否为空?
        if (!this.CheckInput(this.chkEnabled01, this.txtUserCode01))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled02, this.txtUserCode02))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled03, this.txtUserCode03))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled04, this.txtUserCode04))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled05, this.txtUserCode05))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled06, this.txtUserCode06))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled07, this.txtUserCode07))
        {
            return false;
        }
        if (!this.CheckInput(this.chkEnabled08, this.txtUserCode08))
        {
            return false;
        }
        return returnValue;
    }
    #endregion

    #region private bool CheckInput(TextBox txtUserCode)
    /// <summary>
    /// 检查输入情况
    /// </summary>
    /// <param name="txtUserCode">人员</param>
    /// <returns>是否正确</returns>
    private bool CheckInput(CheckBox chkEnabled, TextBox txtUserCode)
    {
        bool returnValue = true;
        if (chkEnabled.Checked)
        {
            // 检查下一个审核人是否为空?
            if (txtUserCode.Enabled && txtUserCode.Visible)
            {
                txtUserCode.Text = txtUserCode.Text.Trim();
                if (txtUserCode.Text.Trim().Length == 0)
                {
                    ScriptUtil.AlertAndRedirect("提示信息：请选择审核人。", Page.Request.RawUrl);
                    return false;
                }
                BaseUserManager userManager = new BaseUserManager(this.UserCenterDbHelper, this.UserInfo);

                List<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();
                parameters.Add(new KeyValuePair<string, object>(BaseUserEntity.FieldCode, txtUserCode.Text));
                parameters.Add(new KeyValuePair<string, object>(BaseUserEntity.FieldEnabled, 1));
                parameters.Add(new KeyValuePair<string, object>(BaseUserEntity.FieldDeletionStateCode, 0));
                if (!userManager.Exists(parameters))
                {
                    ScriptUtil.AlertAndRedirect("提示信息：请选择审核人," + txtUserCode + "工号不存在。", Page.Request.RawUrl);
                    return false;
                }
            }
        }
        return returnValue;
    }
    #endregion

    protected string AutoStatr()
    {
        string returnValue = string.Empty;
        try
        {
            this.WorkFlowDbHelper.Open();
            UserBillManager newsManager = new UserBillManager(this.WorkFlowDbHelper, this.UserInfo);
            string workFlowCode = this.UserInfo.Id + "_" + this.CategoryCode;
            // 这里控制，现实几个审核记录的功能才对。
            BaseWorkFlowActivityManager workFlowActivityManager = new BaseWorkFlowActivityManager(this.WorkFlowDbHelper, this.UserInfo);
            DataTable dtWorkFlowActivity = workFlowActivityManager.GetActivityDTByCode(workFlowCode);
            this.GetWorkFlowActivity(dtWorkFlowActivity);
            returnValue = newsManager.AutoStatr(this.ObjectId, string.Empty, dtWorkFlowActivity);
        }
        catch (Exception ex)
        {
            // this.WorkFlowDbHelper.RollbackTransaction();
            this.LogException(ex);
            throw ex;
        }
        finally
        {
            this.WorkFlowDbHelper.Close();
        }
        // 是否显示提示信息
        if (Utilities.ShowInformation)
        {
            if (!string.IsNullOrEmpty(returnValue))
            {
                ScriptUtil.AlertAndCloseWindow("提示信息：单据提交成功。");
                // ScriptUtil.AlertAndRedirect("提示信息：单据提交成功。", "UserDraftAdmin.aspx");
            }
            else
            {
                ScriptUtil.AlertMessage("提示信息：单据提交失败。");
            }
        }
        return returnValue;
    }

    protected void btnAutoStatr_Click(object sender, EventArgs e)
    {
        if (this.CheckInput())
        {
            this.AutoStatr();
        }
    }

    #region private DataTable GetWorkFlowActivity(DataTable dtWorkFlowActivity)
    /// <summary>
    /// 获取审核流程
    /// </summary>
    /// <param name="dtWorkFlowActivity">审核流程定义</param>
    /// <returns>用户选择的流程</returns>
    private DataTable GetWorkFlowActivity(DataTable dtWorkFlowActivity)
    {
        BaseUserManager userManager = new BaseUserManager(this.UserCenterDbHelper, this.UserInfo);
        BaseUserEntity userEntity = null;
        if (this.txtUserCode01.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode01.Text);
            dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode02.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode02.Text);
            dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode03.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode03.Text);
            dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode04.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode04.Text);
            dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode05.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode05.Text);
            dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode06.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode06.Text);
            dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode07.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode07.Text);
            dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.txtUserCode07.Enabled)
        {
            userEntity = userManager.GetEntityByCode(this.txtUserCode08.Text);
            dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditUserId] = userEntity.Id;
            dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditUserCode] = userEntity.Code;
            dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditUserRealName] = userEntity.RealName;
            dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditDepartmentId] = userEntity.DepartmentId;
            dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditDepartmentName] = userEntity.DepartmentName;
        }
        if (this.chkEnabled08.Enabled && !this.chkEnabled08.Checked)
        {
            dtWorkFlowActivity.Rows[7].Delete();
        }
        if (this.chkEnabled07.Enabled && !this.chkEnabled07.Checked)
        {
            dtWorkFlowActivity.Rows[6].Delete();
        }
        if (this.chkEnabled06.Enabled && !this.chkEnabled06.Checked)
        {
            dtWorkFlowActivity.Rows[5].Delete();
        }
        if (this.chkEnabled05.Enabled && !this.chkEnabled05.Checked)
        {
            dtWorkFlowActivity.Rows[4].Delete();
        }
        if (this.chkEnabled04.Enabled && !this.chkEnabled04.Checked)
        {
            dtWorkFlowActivity.Rows[3].Delete();
        }
        if (this.chkEnabled03.Enabled && !this.chkEnabled03.Checked)
        {
            dtWorkFlowActivity.Rows[2].Delete();
        }
        if (this.chkEnabled02.Enabled && !this.chkEnabled02.Checked)
        {
            dtWorkFlowActivity.Rows[1].Delete();
        }
        if (this.chkEnabled01.Enabled && !this.chkEnabled01.Checked)
        {
            dtWorkFlowActivity.Rows[0].Delete();
        }
        dtWorkFlowActivity.AcceptChanges();
        return dtWorkFlowActivity;
    }
    #endregion

    #region private void ShowWorkFlowActivity(DataTable dtWorkFlowActivity)
    /// <summary>
    /// 显示工作流程
    /// </summary>
    /// <param name="dtWorkFlowActivity">审核步骤</param>
    private void ShowWorkFlowActivity(DataTable dtWorkFlowActivity)
    {
        if (dtWorkFlowActivity == null)
        {
            this.btnAutoStatr.Enabled = false;
            return;
        }
        if (dtWorkFlowActivity.Rows.Count > 0)
        {
            this.btnAutoStatr.Enabled = true;
        }
        this.ShowStep(dtWorkFlowActivity.Rows.Count);

        if (dtWorkFlowActivity.Rows.Count > 0)
        {
            SetStepValue(this.lblDepartment01, dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode01, dtWorkFlowActivity.Rows[0][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 1)
        {
            SetStepValue(this.lblDepartment02, dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode02, dtWorkFlowActivity.Rows[1][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 2)
        {
            SetStepValue(this.lblDepartment03, dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode03, dtWorkFlowActivity.Rows[2][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 3)
        {
            SetStepValue(this.lblDepartment04, dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode04, dtWorkFlowActivity.Rows[3][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 4)
        {
            SetStepValue(this.lblDepartment05, dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode05, dtWorkFlowActivity.Rows[4][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 5)
        {
            SetStepValue(this.lblDepartment06, dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode06, dtWorkFlowActivity.Rows[5][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 6)
        {
            SetStepValue(this.lblDepartment07, dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode07, dtWorkFlowActivity.Rows[6][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
        if (dtWorkFlowActivity.Rows.Count > 7)
        {
            SetStepValue(this.lblDepartment08, dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditDepartmentName].ToString(), this.txtUserCode08, dtWorkFlowActivity.Rows[7][BaseWorkFlowActivityEntity.FieldAuditUserRealName].ToString());
        }
    }
    #endregion

    #region private void SetStepValue(Label lblDepartment, string departmentName, TextBox txtUser, string userName)
    /// <summary>
    /// 绑定部门、用户
    /// </summary>
    /// <param name="lblDepartment">部门</param>
    /// <param name="departmentName">部门主键</param>
    /// <param name="txtUser">用户</param>
    /// <param name="userName">用户姓名</param>
    private void SetStepValue(Label lblDepartment, string departmentName, TextBox txtUser, string userName)
    {
        if (!string.IsNullOrEmpty(departmentName) && !departmentName.Equals("Anyone"))
        {
            lblDepartment.Text = departmentName;
        }
        if (string.IsNullOrEmpty(userName) || userName.Equals("Anyone"))
        {
            txtUser.Enabled = true;
        }
        else
        {
            txtUser.Enabled = false;
            txtUser.Text = userName;
        }
    }
    #endregion

    #region private void ShowStep(int topN)
    /// <summary>
    /// 显示前几个审核步骤
    /// </summary>
    /// <param name="topN">个数</param>
    private void ShowStep(int topN)
    {
        if (topN > 0)
        {
            this.chkEnabled01.Enabled = true;
            this.rowStep1.Visible = true;
        }
        if (topN > 1)
        {
            this.chkEnabled02.Enabled = true;
            this.rowStep2.Visible = true;
        }
        if (topN > 2)
        {
            this.chkEnabled03.Enabled = true;
            this.rowStep3.Visible = true;
        }
        if (topN > 3)
        {
            this.chkEnabled04.Enabled = true;
            this.rowStep4.Visible = true;
        }
        if (topN > 4)
        {
            this.chkEnabled05.Enabled = true;
            this.rowStep5.Visible = true;
        }
        if (topN > 5)
        {
            this.chkEnabled06.Enabled = true;
            this.rowStep6.Visible = true;
        }
        if (topN > 6)
        {
            this.chkEnabled07.Enabled = true;
            this.rowStep7.Visible = true;
        }
        if (topN > 7)
        {
            this.chkEnabled08.Enabled = true;
            this.rowStep8.Visible = true;
        }
    }
    #endregion
}