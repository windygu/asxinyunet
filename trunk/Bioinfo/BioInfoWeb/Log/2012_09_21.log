#Software: .
#ProcessID: 5992
#AppDomain: 1897f84e-1-129926840650009102
#BaseDirectory: C:\DevelopMent\Bioinfo\BioInfoWeb\
#Date: 2012-09-21
#Fields: Time ThreadID IsPoolThread ThreadName Message
14:54:28.075 4 W - NewLife.Core v3.8.2012.0803 Build 2012-09-21 14:26:00
14:54:28.083 4 W - 为NewLife.CommonEntity.IManageProvider配置注册YWSManageProvider，标识Identity=，优先级Priority=5！
14:54:28.841 4 W - NewLife.YWS.Entities.Admin
14:54:29.471 8 W - NewLife.XCode v8.8.2012.0828 Build 2012-09-21 14:26:08
14:54:29.472 8 W - 开始初始化实体类Admin
14:54:29.474 8 W - 完成初始化实体类Admin
14:54:29.745 8 W - 开始初始化实体类Setting
14:54:29.745 8 W - 完成初始化实体类Setting
14:54:29.787 4 Y - 检查实体NewLife.YWS.Entities.Admin的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
14:54:29.787 4 Y - 集中初始化表架构时没赶上，现在补上！
14:54:29.788 4 Y - 开始同步检查表[Admin/SQLite]的数据表架构……
14:54:29.792 4 Y - 创建数据库：Common
14:54:29.794 4 Y - 创建数据库：C:\DevelopMent\Bioinfo\BioInfoWeb\App_Data\Common.db
14:54:29.812 4 Y - 准备从http://j.nnhy.org/?id=3&f=System.Data.SQLite.zip下载文件到C:\DevelopMent\Bioinfo\BioInfoWeb\bin\System.Data.SQLite.zip！
14:54:46.152 4 Y - 下载C:\DevelopMent\Bioinfo\BioInfoWeb\bin\System.Data.SQLite.zip完成（480,573字节），耗时00:00:16.3486461，准备解压到C:\DevelopMent\Bioinfo\BioInfoWeb\bin！
14:54:46.261 4 Y - 解压完成！
14:54:46.401 4 Y - 创建表：Admin(管理员)
14:54:46.432 8 W - 检查实体NewLife.CommonEntity.Setting的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()
14:54:46.432 8 W - 开始同步检查表[Setting/SQLite]的数据表架构……
14:54:46.432 8 W - 创建表：Setting(设置)
14:54:46.448 8 W - 检查表[Setting/SQLite]的数据表架构耗时00:00:00.0163823
14:54:46.448 8 W - 初始化NewLife.CommonEntity.Setting数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()<-..cctor()
14:54:46.448 8 W - 开始检查连接[Common/SQLite]的数据库架构……
14:54:46.526 8 W - [Common]的所有实体类（18个）：SimpleTree,Category,UserProfile,User,Sequence,Administrator,Menu,Role,RoleMenu,Log,Area,GuidCategory,Setting,Simple,Attachment,Statistics,MyRole,Admin
14:54:46.526 8 W - [Common]需要检查架构的实体类（2个）：MyRole,Admin
14:54:46.526 8 W - Common待检查表架构的实体个数：2
14:54:46.526 8 W - 创建表：Role(角色)
14:54:46.526 8 W - 创建表：Admin(管理员)
14:54:46.526 8 W - 检查连接[Common/SQLite]的数据库架构耗时00:00:00.0698644
14:54:46.526 8 W - 一级缓存：关闭缓存
14:54:46.573 4 Y - 修改表CreateTable失败！SQLite error
table Admin already exists[SQL:
Create Table Admin(
	ID integer Primary Key AUTOINCREMENT,
	Name nvarchar(50) NULL COLLATE NOCASE,
	Password nvarchar(50) NULL COLLATE NOCASE,
	DisplayName nvarchar(50) NULL COLLATE NOCASE,
	RoleID int NULL,
	Logins int NULL,
	LastLogin datetime NULL,
	LastLoginIP nvarchar(50) NULL COLLATE NOCASE,
	SSOUserID int NULL,
	IsEnable bit NULL,
	Phone nvarchar(50) NULL COLLATE NOCASE,
	QQ nvarchar(50) NULL COLLATE NOCASE,
	MSN nvarchar(50) NULL COLLATE NOCASE,
	Email nvarchar(50) NULL COLLATE NOCASE
)
][DB:Common/SQLite]
14:54:46.573 4 Y - 修改表CreateIndex失败！SQLite error
index Admin_Name already exists[SQL:Create Unique Index Admin_Name On Admin (Name)][DB:Common/SQLite]
14:54:46.573 4 Y - 修改表CreateIndex失败！SQLite error
index Admin_RoleID already exists[SQL:Create Index Admin_RoleID On Admin (RoleID)][DB:Common/SQLite]
14:54:46.573 4 Y - 检查表[Admin/SQLite]的数据表架构耗时00:00:16.7852058
14:54:46.573 4 Y - 初始化NewLife.YWS.Entities.Admin数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
14:54:46.573 4 Y - 开始初始化Admin管理员数据……
14:54:46.588 4 Y - 完成初始化Admin管理员数据！

#Software: .
#ProcessID: 5992
#AppDomain: 1897f84e-2-129926840911128163
#BaseDirectory: C:\DevelopMent\Bioinfo\BioInfoWeb\
#Date: 2012-09-21
#Fields: Time ThreadID IsPoolThread ThreadName Message
14:54:53.671 13 W - NewLife.Core v3.8.2012.0803 Build 2012-09-21 14:26:00
14:54:53.671 13 W - 为NewLife.CommonEntity.IManageProvider配置注册YWSManageProvider，标识Identity=，优先级Priority=5！
14:54:54.420 13 W - NewLife.XCode v8.8.2012.0828 Build 2012-09-21 14:26:08
14:54:54.420 13 W - 开始初始化实体类Admin
14:54:54.420 13 W - 完成初始化实体类Admin
14:54:54.700 4 W - 开始初始化实体类Setting
14:54:54.700 4 W - 完成初始化实体类Setting
14:54:54.732 8 Y - 检查实体NewLife.YWS.Entities.Admin的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
14:54:54.732 8 Y - 集中初始化表架构时没赶上，现在补上！
14:54:54.732 8 Y - 开始同步检查表[Admin/SQLite]的数据表架构……
14:54:54.841 4 W - 检查实体NewLife.CommonEntity.Setting的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()
14:54:54.841 4 W - 开始同步检查表[Setting/SQLite]的数据表架构……
14:54:54.934 8 Y - 检查表[Admin/SQLite]的数据表架构耗时00:00:00.1917631
14:54:54.934 4 W - 检查表[Setting/SQLite]的数据表架构耗时00:00:00.0928951
14:54:54.934 4 W - 初始化NewLife.CommonEntity.Setting数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()<-..cctor()
14:54:54.934 8 Y - 初始化NewLife.YWS.Entities.Admin数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
14:54:54.934 4 W - 开始检查连接[Common/SQLite]的数据库架构……
14:54:54.934 8 Y - 一级缓存：关闭缓存
14:54:54.997 4 W - [Common]的所有实体类（18个）：SimpleTree,Category,UserProfile,User,Sequence,Administrator,Menu,Role,RoleMenu,Log,Area,GuidCategory,Setting,Simple,Attachment,Statistics,MyRole,Admin
14:54:54.997 4 W - [Common]需要检查架构的实体类（2个）：MyRole,Admin
14:54:54.997 4 W - Common待检查表架构的实体个数：2
14:54:55.012 4 W - 检查连接[Common/SQLite]的数据库架构耗时00:00:00.0753644
14:55:01.380 8 W - 更新实体缓存（第1次）：NewLife.YWS.Entities.Admin 原因：第一次 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:01.384 8 W - 完成更新缓存（第1次）：NewLife.YWS.Entities.Admin
14:55:01.388 8 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:55:01.397 8 W - 开始初始化实体类Log
14:55:01.397 8 W - 完成初始化实体类Log
14:55:01.409 8 W - 检查实体NewLife.CommonEntity.Log的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.InsertAndGetIdentity(String sql)<-Entity<>.EntityOperate.InsertAndGetIdentity(String sql)<-EntityPersistence.Insert(IEntity entity)<-Entity<>.OnInsert()<-.DoAction(Func<Int32> func,Nullable<Boolean> isnew)<-.Insert()<-.Save()<-Administrator<>.WriteLog(Type type,String action,String remark)
14:55:01.409 8 W - 开始同步检查表[Log/SQLite]的数据表架构……
14:55:01.409 8 W - 创建表：Log(日志)
14:55:01.420 8 W - 检查表[Log/SQLite]的数据表架构耗时00:00:00.0104276
14:55:01.420 8 W - 初始化NewLife.CommonEntity.Log数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.InsertAndGetIdentity(String sql)<-Entity<>.EntityOperate.InsertAndGetIdentity(String sql)<-EntityPersistence.Insert(IEntity entity)<-Entity<>.OnInsert()<-.DoAction(Func<Int32> func,Nullable<Boolean> isnew)<-.Insert()<-.Save()<-Administrator<>.WriteLog(Type type,String action,String remark)<-.WriteLog(String action,String remark)
14:55:01.434 4 W - 开始初始化实体类Menu
14:55:01.434 4 W - 完成初始化实体类Menu
14:55:01.448 4 W - 开始初始化实体类MyRole
14:55:01.448 4 W - 完成初始化实体类MyRole
14:55:01.450 4 W - 更新实体缓存（第1次）：NewLife.YWS.Entities.MyRole 原因：第一次 Role<>.FindByID(Int32 id)<-
14:55:01.452 4 W - 检查实体NewLife.YWS.Entities.MyRole的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)<-.get_Entities()<-Role<>.FindByID(Int32 id)
14:55:01.452 4 W - 初始化NewLife.YWS.Entities.MyRole数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)<-.get_Entities()<-Role<>.FindByID(Int32 id)<-
14:55:01.460 4 W - 开始初始化MyRole角色数据……
14:55:01.470 4 W - 完成初始化MyRole角色数据！
14:55:01.473 4 W - 检查实体NewLife.CommonEntity.RoleMenu的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.get_LongCount()<-.get_Count()<-Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)
14:55:01.473 4 W - 开始同步检查表[RoleMenu/SQLite]的数据表架构……
14:55:01.473 4 W - 创建表：RoleMenu(角色和菜单)
14:55:01.476 4 W - 检查表[RoleMenu/SQLite]的数据表架构耗时00:00:00.0029824
14:55:01.477 4 W - 初始化NewLife.CommonEntity.RoleMenu数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.get_LongCount()<-.get_Count()<-Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)
14:55:01.478 4 W - 开始初始化实体类RoleMenu
14:55:01.478 4 W - 完成初始化实体类RoleMenu
14:55:01.478 4 W - 检查实体NewLife.CommonEntity.Menu的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)
14:55:01.479 4 W - 开始同步检查表[Menu/SQLite]的数据表架构……
14:55:01.479 4 W - 创建表：Menu(菜单)
14:55:01.484 4 W - 检查表[Menu/SQLite]的数据表架构耗时00:00:00.0053057
14:55:01.485 4 W - 初始化NewLife.CommonEntity.Menu数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)<-.get_Entities()
14:55:01.486 4 W - 开始初始化Menu菜单数据……
14:55:01.494 4 W - 更新实体缓存（第1次）：NewLife.CommonEntity.Menu 原因：第一次 Menu<>.FindByName(String name)<-.FindForName(String name)
14:55:01.495 4 W - 完成更新缓存（第1次）：NewLife.CommonEntity.Menu
14:55:01.505 4 W - 更新实体缓存（第2次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:01.505 4 W - 完成更新缓存（第2次）：NewLife.CommonEntity.Menu
14:55:01.509 4 W - 更新实体缓存（第3次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllNoParent()<-.FindAllByParent(EntityTree<,>.TKey parentKey)
14:55:01.509 4 W - 完成更新缓存（第3次）：NewLife.CommonEntity.Menu
14:55:01.510 4 W - 更新实体缓存（第4次）：NewLife.CommonEntity.Menu 原因：无缓存数据 Menu<>.ScanAndAdd()<-.InitData()
14:55:01.510 4 W - 完成更新缓存（第4次）：NewLife.CommonEntity.Menu
14:55:01.517 4 W - 更新实体缓存（第5次）：NewLife.CommonEntity.Menu 原因：无缓存数据 Entity<>.OnInsert()<-.DoAction(Func<Int32> func,Nullable<Boolean> isnew)
14:55:01.518 4 W - 完成更新缓存（第5次）：NewLife.CommonEntity.Menu
14:55:01.553 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:01.557 4 W - 完成初始化Menu菜单数据！
14:55:01.558 4 W - 更新实体缓存（第6次）：NewLife.CommonEntity.Menu 原因：无缓存数据 Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)
14:55:01.559 4 W - 完成更新缓存（第6次）：NewLife.CommonEntity.Menu
14:55:01.560 4 W - 开始初始化RoleMenu授权数据……
14:55:01.560 4 W - 更新实体缓存（第2次）：NewLife.YWS.Entities.MyRole 原因：无缓存数据 Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)
14:55:01.562 4 W - 完成更新缓存（第2次）：NewLife.YWS.Entities.MyRole
14:55:01.568 4 W - 更新实体缓存（第1次）：NewLife.CommonEntity.RoleMenu 原因：第一次 RoleMenu<>.FindAllByRoleID(Int32 roleID)<-.GrantAll(Int32 roleID,List<Int32> menuIDs)
14:55:01.569 4 W - 完成更新缓存（第1次）：NewLife.CommonEntity.RoleMenu
14:55:01.570 4 W - 更新实体缓存（第2次）：NewLife.CommonEntity.RoleMenu 原因：无缓存数据 RoleMenu<>.FindAllByRoleID(Int32 roleID)<-.GrantAll(Int32 roleID,List<Int32> menuIDs)
14:55:01.570 4 W - 完成更新缓存（第2次）：NewLife.CommonEntity.RoleMenu
14:55:01.574 4 W - 更新实体缓存（第3次）：NewLife.CommonEntity.RoleMenu 原因：无缓存数据 Entity<>.Exist(String[] names)<-.CheckExist(String[] names)
14:55:01.574 4 W - 完成更新缓存（第3次）：NewLife.CommonEntity.RoleMenu
14:55:01.576 4 W - 更新实体缓存（第4次）：NewLife.CommonEntity.RoleMenu 原因：无缓存数据 Entity<>.OnInsert()<-.DoAction(Func<Int32> func,Nullable<Boolean> isnew)
14:55:01.577 4 W - 完成更新缓存（第4次）：NewLife.CommonEntity.RoleMenu
14:55:01.586 4 W - 完成初始化RoleMenu授权数据！
14:55:01.586 4 W - 完成更新缓存（第2次）：NewLife.YWS.Entities.MyRole
14:55:01.616 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:01.616 4 W - 更新实体缓存（第7次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:01.618 4 W - 完成更新缓存（第7次）：NewLife.CommonEntity.Menu
14:55:01.622 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:01.623 4 W - 更新实体缓存（第8次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:01.624 4 W - 完成更新缓存（第8次）：NewLife.CommonEntity.Menu
14:55:01.625 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:01.626 4 W - 更新实体缓存（第9次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:01.627 4 W - 完成更新缓存（第9次）：NewLife.CommonEntity.Menu
14:55:01.629 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:01.630 4 W - 更新实体缓存（第10次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:01.632 4 W - 完成更新缓存（第10次）：NewLife.CommonEntity.Menu
14:55:01.634 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:02.283 4 W - 更新实体缓存（第11次）：NewLife.CommonEntity.Menu 原因：无缓存数据 Entity<>.FindWithCache(String name,Object value)<-Entity<>.EntityOperate.FindWithCache(String name,Object value)
14:55:02.285 4 W - 完成更新缓存（第11次）：NewLife.CommonEntity.Menu
14:55:02.712 7 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:02.714 7 W - 更新实体缓存（第12次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:02.715 7 W - 完成更新缓存（第12次）：NewLife.CommonEntity.Menu
14:55:02.717 7 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:02.718 7 W - 更新实体缓存（第13次）：NewLife.CommonEntity.Menu 原因：无缓存数据 EntityTree<,>.FindAllByParent(EntityTree<,>.TKey parentKey)<-.FindChilds()
14:55:02.719 7 W - 完成更新缓存（第13次）：NewLife.CommonEntity.Menu
14:55:02.721 7 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
14:55:04.893 14 W - 更新实体缓存（第14次）：NewLife.CommonEntity.Menu 原因：无缓存数据 Menu<>.GetCurrentMenu()<-.get_Current()
14:55:04.896 14 W - 完成更新缓存（第14次）：NewLife.CommonEntity.Menu
14:55:04.937 14 W - 开始初始化实体类Customer
14:55:04.938 14 W - 完成初始化实体类Customer
14:55:04.940 14 W - 创建数据库：C:\DevelopMent\Bioinfo\BioInfoWeb\App_Data\YWS.db
14:55:04.947 14 W - 检查实体NewLife.YWS.Entities.Customer的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.Search(String key,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)
14:55:04.947 14 W - 集中初始化表架构时没赶上，现在补上！
14:55:04.947 14 W - 开始同步检查表[Customer/SQLite]的数据表架构……
14:55:04.948 14 W - 创建表：Customer(客户)
14:55:04.952 14 W - 检查表[Customer/SQLite]的数据表架构耗时00:00:00.0050649
14:55:04.953 14 W - 初始化NewLife.YWS.Entities.Customer数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.Search(String key,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)<-.ExecuteSelect(DataSourceSelectArguments arguments)
14:55:04.953 14 W - 开始检查连接[YWS/SQLite]的数据库架构……
14:55:04.955 14 W - [YWS]的所有实体类（6个）：Feedliquor,Customer,CustomerType,Maintenance,Machine,Record
14:55:04.956 14 W - [YWS]需要检查架构的实体类（6个）：Feedliquor,Customer,CustomerType,Maintenance,Machine,Record
14:55:04.956 14 W - YWS待检查表架构的实体个数：6
14:55:04.956 14 W - 创建表：Feedliquor(液料规格)
14:55:04.959 14 W - 创建表：Customer(客户)
14:55:04.962 14 W - 修改表CreateTable失败！SQLite error
table Customer already exists[SQL:
Create Table Customer(
	ID integer Primary Key AUTOINCREMENT,
	No nvarchar(50) NULL COLLATE NOCASE,
	Name nvarchar(50) NULL COLLATE NOCASE,
	Linkman nvarchar(50) NULL COLLATE NOCASE,
	Department nvarchar(50) NULL COLLATE NOCASE,
	Tel nvarchar(50) NULL COLLATE NOCASE,
	Fax nvarchar(50) NULL COLLATE NOCASE,
	Email nvarchar(50) NULL COLLATE NOCASE,
	QQ nvarchar(50) NULL COLLATE NOCASE,
	MSN nvarchar(50) NULL COLLATE NOCASE,
	Address nvarchar(50) NULL COLLATE NOCASE,
	AddTime datetime NULL,
	Remark nvarchar(100) NULL COLLATE NOCASE,
	CustomerTypeID int NULL
)
][DB:YWS/SQLite]
14:55:04.963 14 W - 修改表CreateIndex失败！SQLite error
index Customer_No already exists[SQL:Create Unique Index Customer_No On Customer (No)][DB:YWS/SQLite]
14:55:04.963 14 W - 修改表CreateIndex失败！SQLite error
index Customer_Name already exists[SQL:Create Unique Index Customer_Name On Customer (Name)][DB:YWS/SQLite]
14:55:04.963 14 W - 修改表CreateIndex失败！SQLite error
index Customer_CustomerTypeID already exists[SQL:Create Index Customer_CustomerTypeID On Customer (CustomerTypeID)][DB:YWS/SQLite]
14:55:04.963 14 W - 创建表：CustomerType(客户类型)
14:55:04.966 14 W - 创建表：Maintenance(维修保养记录)
14:55:04.969 14 W - 创建表：Machine(机器零件规格)
14:55:04.972 14 W - 创建表：Record(交易记录)
14:55:04.976 14 W - 检查连接[YWS/SQLite]的数据库架构耗时00:00:00.0224120
14:55:09.802 14 W - 开始初始化实体类Feedliquor
14:55:09.802 14 W - 完成初始化实体类Feedliquor
14:55:09.811 14 W - 检查实体NewLife.YWS.Entities.Feedliquor的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-Feedliquor.Search(String name,String cementGroup,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)
14:55:09.812 14 W - 初始化NewLife.YWS.Entities.Feedliquor数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-Feedliquor.Search(String name,String cementGroup,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)<-.ExecuteSelect(DataSourceSelectArguments arguments)
14:55:19.011 13 W - 开始初始化实体类CommonManual
14:55:19.012 13 W - 完成初始化实体类CommonManual
14:55:19.174 13 W - 开始初始化实体类User
14:55:19.174 13 W - 完成初始化实体类User
14:55:19.177 13 W - 开始初始化实体类Administrator
14:55:19.178 13 W - 完成初始化实体类Administrator
14:55:19.180 13 W - 更新实体缓存（第1次）：NewLife.CommonEntity.Administrator 原因：第一次 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:19.181 13 W - 检查实体NewLife.CommonEntity.Administrator的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)<-.get_Entities()<-Administrator<>.FindByName(String name)
14:55:19.181 13 W - 开始同步检查表[Administrator/SQLite]的数据表架构……
14:55:19.182 13 W - 创建表：Administrator(管理员)
14:55:19.185 13 W - 检查表[Administrator/SQLite]的数据表架构耗时00:00:00.0034777
14:55:19.185 13 W - 初始化NewLife.CommonEntity.Administrator数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll()<-CacheBase<>.InvokeFill(Func callback)<-EntityCache<>.FillWaper(Object state)<-.get_Entities()<-Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:19.186 13 W - 开始初始化Administrator管理员数据……
14:55:19.188 13 W - 完成初始化Administrator管理员数据！
14:55:19.189 13 W - 完成更新缓存（第1次）：NewLife.CommonEntity.Administrator
14:55:19.190 13 W - 清空实体缓存：NewLife.CommonEntity.Administrator 原因：修改数据后提交事务
14:55:19.193 13 W - 更新实体缓存（第2次）：NewLife.YWS.Entities.Admin 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:19.193 13 W - 完成更新缓存（第2次）：NewLife.YWS.Entities.Admin
14:55:19.194 13 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:55:19.195 13 W - System.Web.HttpUnhandledException (0x80004005): 引发类型为“System.Web.HttpUnhandledException”的异常。 ---> System.Reflection.TargetInvocationException: 调用的目标发生了异常。 ---> XCode.Exceptions.XCodeException: 请在使用数据库前设置[CommonManual]连接字符串
   在 XCode.DataAccessLayer.DAL..ctor(String connName) 位置 D:\Develop\X\trunk\Src\XCode\DataAccessLayer\DAL.cs:行号 36
   在 XCode.DataAccessLayer.DAL.Create(String connName) 位置 D:\Develop\X\trunk\Src\XCode\DataAccessLayer\DAL.cs:行号 73
   在 XCode.Entity`1.Meta.get_DBO() 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity_Meta.cs:行号 162
   在 XCode.Entity`1.Meta.FormatName(String name) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity_Meta.cs:行号 519
   在 XCode.Entity`1.CreateBuilder(String whereClause, String orderClause, String selects, Int32 startRowIndex, Int32 maximumRows, Boolean needOrderByID) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 1109
   在 XCode.Entity`1.FindAll(String whereClause, String orderClause, String selects, Int32 startRowIndex, Int32 maximumRows) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 680
   在 XCode.Entity`1.Search(String key, String orderClause, Int32 startRowIndex, Int32 maximumRows) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 790
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct& sig, MethodAttributes methodAttributes, RuntimeType typeOwner)
   在 System.RuntimeMethodHandle.InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeType typeOwner)
   在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
   在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   在 System.Web.UI.WebControls.ObjectDataSourceView.InvokeMethod(ObjectDataSourceMethod method, Boolean disposeInstance, Object& instance)
   在 System.Web.UI.WebControls.ObjectDataSourceView.ExecuteSelect(DataSourceSelectArguments arguments)
   在 System.Web.UI.DataSourceView.Select(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback)
   在 System.Web.UI.WebControls.DataBoundControl.PerformSelect()
   在 System.Web.UI.WebControls.BaseDataBoundControl.DataBind()
   在 System.Web.UI.WebControls.GridView.DataBind()
   在 System.Web.UI.WebControls.BaseDataBoundControl.EnsureDataBound()
   在 System.Web.UI.WebControls.CompositeDataBoundControl.CreateChildControls()
   在 System.Web.UI.Control.EnsureChildControls()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.HandleError(Exception e)
   在 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.ProcessRequest()
   在 System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)
   在 System.Web.UI.Page.ProcessRequest(HttpContext context)
   在 ASP.admin_help_manual_aspx.ProcessRequest(HttpContext context) 位置 c:\Users\DBH\AppData\Local\Temp\Temporary ASP.NET Files\bioinfoweb\fc4d8631\c4e36f9e\App_Web_0yficsuk.0.cs:行号 0
   在 System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
来源：127.0.0.1
平台：Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)
访问：/BioInfoWeb/Admin/Help/Manual.aspx
引用：http://localhost:2242/BioInfoWeb/Admin/Frame/Left.aspx?ID=11
用户：DBH-PC\DBH(NTLM)
登录：admin
登录：admin

14:55:19.585 7 W - 更新实体缓存（第2次）：NewLife.CommonEntity.Administrator 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:19.586 7 W - 完成更新缓存（第2次）：NewLife.CommonEntity.Administrator
14:55:19.588 7 W - 清空实体缓存：NewLife.CommonEntity.Administrator 原因：修改数据后提交事务
14:55:19.590 7 W - 更新实体缓存（第3次）：NewLife.YWS.Entities.Admin 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:19.595 7 W - 完成更新缓存（第3次）：NewLife.YWS.Entities.Admin
14:55:19.596 7 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:55:19.597 7 W - System.Web.HttpUnhandledException (0x80004005): 引发类型为“System.Web.HttpUnhandledException”的异常。 ---> System.Reflection.TargetInvocationException: 调用的目标发生了异常。 ---> XCode.Exceptions.XCodeException: 请在使用数据库前设置[CommonManual]连接字符串
   在 XCode.DataAccessLayer.DAL..ctor(String connName) 位置 D:\Develop\X\trunk\Src\XCode\DataAccessLayer\DAL.cs:行号 36
   在 XCode.DataAccessLayer.DAL.Create(String connName) 位置 D:\Develop\X\trunk\Src\XCode\DataAccessLayer\DAL.cs:行号 73
   在 XCode.Entity`1.Meta.get_DBO() 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity_Meta.cs:行号 162
   在 XCode.Entity`1.Meta.FormatName(String name) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity_Meta.cs:行号 519
   在 XCode.Entity`1.CreateBuilder(String whereClause, String orderClause, String selects, Int32 startRowIndex, Int32 maximumRows, Boolean needOrderByID) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 1109
   在 XCode.Entity`1.FindAll(String whereClause, String orderClause, String selects, Int32 startRowIndex, Int32 maximumRows) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 680
   在 XCode.Entity`1.Search(String key, String orderClause, Int32 startRowIndex, Int32 maximumRows) 位置 D:\Develop\X\trunk\Src\XCode\Entity\Entity.cs:行号 790
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct& sig, MethodAttributes methodAttributes, RuntimeType typeOwner)
   在 System.RuntimeMethodHandle.InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeType typeOwner)
   在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
   在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   在 System.Web.UI.WebControls.ObjectDataSourceView.InvokeMethod(ObjectDataSourceMethod method, Boolean disposeInstance, Object& instance)
   在 System.Web.UI.WebControls.ObjectDataSourceView.ExecuteSelect(DataSourceSelectArguments arguments)
   在 System.Web.UI.DataSourceView.Select(DataSourceSelectArguments arguments, DataSourceViewSelectCallback callback)
   在 System.Web.UI.WebControls.DataBoundControl.PerformSelect()
   在 System.Web.UI.WebControls.BaseDataBoundControl.DataBind()
   在 System.Web.UI.WebControls.GridView.DataBind()
   在 System.Web.UI.WebControls.BaseDataBoundControl.EnsureDataBound()
   在 System.Web.UI.WebControls.CompositeDataBoundControl.CreateChildControls()
   在 System.Web.UI.Control.EnsureChildControls()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Control.PreRenderRecursiveInternal()
   在 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.HandleError(Exception e)
   在 System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)
   在 System.Web.UI.Page.ProcessRequest()
   在 System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)
   在 System.Web.UI.Page.ProcessRequest(HttpContext context)
   在 ASP.admin_help_manual_aspx.ProcessRequest(HttpContext context) 位置 c:\Users\DBH\AppData\Local\Temp\Temporary ASP.NET Files\bioinfoweb\fc4d8631\c4e36f9e\App_Web_0yficsuk.0.cs:行号 0
   在 System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
来源：127.0.0.1
平台：Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)
访问：/BioInfoWeb/Admin/Help/Manual.aspx
引用：http://localhost:2242/BioInfoWeb/Admin/Frame/Left.aspx?ID=11
用户：DBH-PC\DBH(NTLM)
登录：admin
登录：admin

14:55:20.949 13 W - 更新实体缓存（第3次）：NewLife.CommonEntity.Administrator 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:20.950 13 W - 完成更新缓存（第3次）：NewLife.CommonEntity.Administrator
14:55:20.951 13 W - 清空实体缓存：NewLife.CommonEntity.Administrator 原因：修改数据后提交事务
14:55:20.952 13 W - 更新实体缓存（第4次）：NewLife.YWS.Entities.Admin 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:20.953 13 W - 完成更新缓存（第4次）：NewLife.YWS.Entities.Admin
14:55:20.953 13 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:55:20.954 13 W - System.Web.HttpCompileException (0x80004005): c:\DevelopMent\Bioinfo\BioInfoWeb\Admin\Sys\Admin.aspx.cs(40): error CS0104: “Func”是“System.Func<NewLife.CommonEntity.IAdministrator,bool>”和“NewLife.Reflection.Func<NewLife.CommonEntity.IAdministrator,bool>”之间的不明确的引用
   在 System.Web.Compilation.BuildManager.PostProcessFoundBuildResult(BuildResult result, Boolean keyFromVPP, VirtualPath virtualPath)
   在 System.Web.Compilation.BuildManager.GetBuildResultFromCacheInternal(String cacheKey, Boolean keyFromVPP, VirtualPath virtualPath, Int64 hashCode, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVPathBuildResultFromCacheInternal(VirtualPath virtualPath, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound)
   在 System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp)
   在 System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)
   在 System.Web.UI.PageHandlerFactory.System.Web.IHttpHandlerFactory2.GetHandler(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)
   在 System.Web.HttpApplication.MapHttpHandler(HttpContext context, String requestType, VirtualPath path, String pathTranslated, Boolean useAppConfig)
   在 System.Web.HttpApplication.MapHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
来源：127.0.0.1
平台：Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)
访问：/BioInfoWeb/Admin/Sys/Admin.aspx
引用：http://localhost:2242/BioInfoWeb/Admin/Frame/Left.aspx?ID=11
用户：DBH-PC\DBH(NTLM)
登录：admin
登录：admin

14:55:25.178 13 W - 更新实体缓存（第1次）：NewLife.CommonEntity.Log 原因：第一次 Log<>.FindAllCategory()<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)
14:55:25.184 13 W - 完成更新缓存（第1次）：NewLife.CommonEntity.Log
14:55:27.761 4 W - 更新实体缓存（第4次）：NewLife.CommonEntity.Administrator 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:27.763 4 W - 完成更新缓存（第4次）：NewLife.CommonEntity.Administrator
14:55:27.764 4 W - 清空实体缓存：NewLife.CommonEntity.Administrator 原因：修改数据后提交事务
14:55:27.765 4 W - 更新实体缓存（第5次）：NewLife.YWS.Entities.Admin 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:55:27.766 4 W - 完成更新缓存（第5次）：NewLife.YWS.Entities.Admin
14:55:27.767 4 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:55:27.767 4 W - System.Web.HttpCompileException (0x80004005): c:\DevelopMent\Bioinfo\BioInfoWeb\Admin\Sys\Role.aspx.cs(77): error CS0104: “Func”是“System.Func<NewLife.CommonEntity.IRole,bool>”和“NewLife.Reflection.Func<NewLife.CommonEntity.IRole,bool>”之间的不明确的引用
   在 System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath)
   在 System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   在 System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound)
   在 System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp)
   在 System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)
   在 System.Web.UI.PageHandlerFactory.System.Web.IHttpHandlerFactory2.GetHandler(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)
   在 System.Web.HttpApplication.MapHttpHandler(HttpContext context, String requestType, VirtualPath path, String pathTranslated, Boolean useAppConfig)
   在 System.Web.HttpApplication.MapHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
来源：127.0.0.1
平台：Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)
访问：/BioInfoWeb/Admin/Sys/Role.aspx
引用：http://localhost:2242/BioInfoWeb/Admin/Frame/Left.aspx?ID=11
用户：DBH-PC\DBH(NTLM)
登录：admin
登录：admin

14:56:47.093 13 W - NewLife.YWS.Entities.Admin
14:56:48.465 8 W - 更新实体缓存（第6次）：NewLife.YWS.Entities.Admin 原因：无缓存数据 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
14:56:48.465 8 W - 完成更新缓存（第6次）：NewLife.YWS.Entities.Admin
14:56:48.465 8 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
14:56:48.481 7 W - 更新实体缓存（第3次）：NewLife.YWS.Entities.MyRole 原因：60秒过期 Role<>.FindByID(Int32 id)<-
14:56:48.481 7 W - 完成更新缓存（第3次）：NewLife.YWS.Entities.MyRole
14:56:48.481 7 W - 更新实体缓存（第5次）：NewLife.CommonEntity.RoleMenu 原因：60秒过期 RoleMenu<>.FindAllByRoleID(Int32 roleID)<-
14:56:48.481 7 W - 完成更新缓存（第5次）：NewLife.CommonEntity.RoleMenu
14:56:48.481 7 W - 更新实体缓存（第15次）：NewLife.CommonEntity.Menu 原因：60秒过期 Menu<>.FindByID(Int32 id)<-
14:56:48.481 7 W - 完成更新缓存（第15次）：NewLife.CommonEntity.Menu
14:56:51.260 14 W - 开始初始化实体类Machine
14:56:51.260 14 W - 完成初始化实体类Machine
14:56:51.260 14 W - 检查实体NewLife.YWS.Entities.Machine的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-Machine.Search(String name,String groups,String customer,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)
14:56:51.260 14 W - 初始化NewLife.YWS.Entities.Machine数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-Machine.Search(String name,String groups,String customer,String orderClause,Int32 startRowIndex,Int32 maximumRows)<-RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,SignatureStruct& sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-.InvokeMethodFast(IRuntimeMethodInfo method,Object target,Object[] arguments,Signature sig,MethodAttributes methodAttributes,RuntimeType typeOwner)<-RuntimeMethodInfo.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture,Boolean skipVisibilityChecks)<-.Invoke(Object obj,BindingFlags invokeAttr,Binder binder,Object[] parameters,CultureInfo culture)<-ObjectDataSourceView.InvokeMethod(ObjectDataSourceView.ObjectDataSourceMethod method,Boolean disposeInstance,Object& instance)<-.ExecuteSelect(DataSourceSelectArguments arguments)
15:15:00.146 2 N - 清空单对象缓存：NewLife.CommonEntity.Setting

#Software: .
#ProcessID: 4284
#AppDomain: 1897f84e-1-129926876370233699
#BaseDirectory: C:\DevelopMent\Bioinfo\BioInfoWeb\
#Date: 2012-09-21
#Fields: Time ThreadID IsPoolThread ThreadName Message
15:53:57.803 4 W - NewLife.Core v3.8.2012.0803 Build 2012-09-21 14:26:00
15:53:57.818 4 W - 为NewLife.CommonEntity.IManageProvider配置注册YWSManageProvider，标识Identity=，优先级Priority=5！
15:53:58.536 4 W - NewLife.YWS.Entities.Admin
15:53:58.583 4 W - NewLife.XCode v8.8.2012.0828 Build 2012-09-21 14:26:08
15:53:58.583 4 W - 开始初始化实体类Admin
15:53:58.583 4 W - 完成初始化实体类Admin
15:53:58.786 4 W - 开始初始化实体类Setting
15:53:58.786 4 W - 完成初始化实体类Setting
15:53:58.801 8 Y - 检查实体NewLife.YWS.Entities.Admin的数据表架构，模式：CheckAllTablesWhenInit，调用栈：Entity<>.Meta.CheckModel()<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
15:53:58.801 8 Y - 集中初始化表架构时没赶上，现在补上！
15:53:58.801 8 Y - 开始同步检查表[Admin/SQLite]的数据表架构……
15:53:58.957 4 W - 检查实体NewLife.CommonEntity.Setting的数据表架构，模式：CheckTableWhenFirstUse，调用栈：Entity<>.Meta.CheckModel()<-.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()
15:53:58.957 4 W - 开始同步检查表[Setting/SQLite]的数据表架构……
15:53:59.098 4 W - 检查表[Setting/SQLite]的数据表架构耗时00:00:00.1384629
15:53:59.098 8 Y - 检查表[Admin/SQLite]的数据表架构耗时00:00:00.2935100
15:53:59.098 4 W - 初始化NewLife.CommonEntity.Setting数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.Query(SelectBuilder builder,Int32 startRowIndex,Int32 maximumRows)<-Entity<>.FindAll(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindAll(String[] names,Object[] values)<-.FindAll(String name,Object value)<-Setting<>.get_Childs()<-.FindByName(String name)<-.Ensure(String name,Setting<>.T defval,String displayName)<-SysSetting.get_Sys()<-..cctor()
15:53:59.098 8 Y - 初始化NewLife.YWS.Entities.Admin数据，调用栈：Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)<-.get_LongCount()<-.get_Count()<-Entity<>.FindCount(String whereClause,String orderClause,String selects,Int32 startRowIndex,Int32 maximumRows)<-.FindCount()<-Entity<>.EntityOperate.FindCount()<-QueueUserWorkItemCallback.WaitCallback_Context(Object state)<-ExecutionContext.runTryCode(Object userData)
15:53:59.098 4 W - 开始检查连接[Common/SQLite]的数据库架构……
15:53:59.098 8 Y - 一级缓存：关闭缓存
15:53:59.160 4 W - [Common]的所有实体类（18个）：SimpleTree,Category,UserProfile,User,Sequence,Administrator,Menu,Role,RoleMenu,Log,Area,GuidCategory,Setting,Simple,Attachment,Statistics,MyRole,Admin
15:53:59.160 4 W - [Common]需要检查架构的实体类（2个）：MyRole,Admin
15:53:59.160 4 W - Common待检查表架构的实体个数：2
15:53:59.176 4 W - 检查连接[Common/SQLite]的数据库架构耗时00:00:00.0802033
16:06:15.675 2 N - 清空单对象缓存：NewLife.CommonEntity.Setting
16:06:15.675 2 N - System.ObjectDisposedException: 无法访问已释放的对象。
对象名:“SQLiteFactory”。
   在 System.Data.SQLite.SQLiteFactory.CheckDisposed()
   在 System.Data.SQLite.SQLiteFactory.CreateConnection()
   在 XCode.DataAccessLayer.DbSession.get_Conn()
   在 XCode.DataAccessLayer.DbSession.Open()
   在 XCode.DataAccessLayer.FileDbSession.Open()
   在 XCode.DataAccessLayer.DbSession.BeginTransaction()
   在 XCode.DataAccessLayer.DAL.BeginTransaction()
   在 XCode.Entity`1.Meta.BeginTrans()
   在 XCode.Entity`1.DoAction(Func`1 func, Nullable`1 isnew)
   在 XCode.Entity`1.Update()
   在 XCode.Cache.SingleEntityCache`2.<>c__DisplayClass16.<Clear>b__15()
   在 XCode.Cache.CacheBase`1.InvokeFill(Func callback)
