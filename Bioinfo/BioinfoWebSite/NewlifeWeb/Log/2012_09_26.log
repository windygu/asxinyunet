#Software: .
#ProcessID: 5540
#AppDomain: 7353210d-1-129930930685914445
#BaseDirectory: C:\Users\DBH\Desktop\Web\
#Date: 2012-09-26
#Fields: Time ThreadID IsPoolThread ThreadName Message
08:31:11.056 4 W - NewLife.Core v3.8.2012.0803 Build 2012-09-25 12:03:50
08:31:11.056 4 W - 为NewLife.CommonEntity.IManageProvider配置注册YWSManageProvider，标识Identity=，优先级Priority=5！
08:31:12.023 4 Y - NewLife.XCode v8.8.2012.0828 Build 2012-09-25 12:01:34
08:31:12.023 4 Y - 创建数据库：Common
08:31:12.039 4 Y - 准备从http://j.nnhy.org/?id=3&f=System.Data.SQLite.zip下载文件到C:\Users\DBH\Desktop\Web\bin\System.Data.SQLite.zip！
08:31:14.394 4 Y - 下载C:\Users\DBH\Desktop\Web\bin\System.Data.SQLite.zip完成（480,573字节），耗时00:00:02.3535220，准备解压到C:\Users\DBH\Desktop\Web\bin！
08:31:14.503 4 Y - 解压完成！
08:31:14.644 4 Y - 创建表：Admin(管理员)
08:31:14.644 8 W - 检查实体NewLife.CommonEntity.Setting的数据表架构，模式：CheckTableWhenFirstUse
08:31:14.644 8 W - 创建表：Setting(设置)
08:31:14.675 4 Y - 初始化NewLife.YWS.Entities.Admin数据
08:31:14.675 4 Y - 开始初始化Admin管理员数据……
08:31:14.691 4 Y - 开始检查连接[Common/SQLite]的数据库架构……
08:31:14.753 4 Y - [Common]的所有实体类（17个）：Sequence,GuidCategory,Administrator,Menu,Role,RoleMenu,Log,Area,User,Simple,SimpleTree,Setting,Statistics,UserProfile,Attachment,Category,Admin
08:31:14.753 4 Y - [Common]需要检查架构的实体类（1个）：Admin
08:31:14.753 4 Y - Common待检查表架构的实体个数：1
08:31:14.753 4 Y - 创建表：Admin(管理员)
08:31:14.753 4 Y - 修改表CreateTable失败！SQLite error
table Admin already exists[SQL:
Create Table Admin(
	ID integer Primary Key AUTOINCREMENT,
	Name nvarchar(50) NULL COLLATE NOCASE,
	Password nvarchar(50) NULL COLLATE NOCASE,
	DisplayName nvarchar(50) NULL COLLATE NOCASE,
	RoleID int NULL,
	Logins int NULL,
	LastLogin datetime NULL,
	LastLoginIP nvarchar(50) NULL COLLATE NOCASE,
	SSOUserID int NULL,
	IsEnable bit NULL,
	Phone nvarchar(50) NULL COLLATE NOCASE,
	QQ nvarchar(50) NULL COLLATE NOCASE,
	MSN nvarchar(50) NULL COLLATE NOCASE,
	Email nvarchar(50) NULL COLLATE NOCASE
)
][DB:Common/SQLite]
08:31:14.753 4 Y - 修改表CreateIndex失败！SQLite error
index Admin_Name already exists[SQL:Create Unique Index Admin_Name On Admin (Name)][DB:Common/SQLite]
08:31:14.753 4 Y - 修改表CreateIndex失败！SQLite error
index Admin_RoleID already exists[SQL:Create Index Admin_RoleID On Admin (RoleID)][DB:Common/SQLite]
08:31:14.753 4 Y - 检查连接[Common/SQLite]的数据库架构耗时00:00:00.0635531
08:31:14.753 4 Y - 一级缓存：关闭缓存
08:31:14.784 4 Y - 完成初始化Admin管理员数据！
08:31:14.940 8 W - 初始化NewLife.CommonEntity.Setting数据

#Software: .
#ProcessID: 5540
#AppDomain: 7353210d-2-129930930751434560
#BaseDirectory: C:\Users\DBH\Desktop\Web\
#Date: 2012-09-26
#Fields: Time ThreadID IsPoolThread ThreadName Message
08:31:18.493 12 Y - NewLife.Core v3.8.2012.0803 Build 2012-09-25 12:03:50
08:31:18.493 12 Y - 为NewLife.CommonEntity.IManageProvider配置注册YWSManageProvider，标识Identity=，优先级Priority=5！
08:31:19.071 8 W - NewLife.XCode v8.8.2012.0828 Build 2012-09-25 12:01:34
08:31:19.071 8 W - 检查实体NewLife.CommonEntity.Setting的数据表架构，模式：CheckTableWhenFirstUse
08:31:19.367 8 W - 初始化NewLife.CommonEntity.Setting数据
08:31:19.367 12 Y - 初始化NewLife.YWS.Entities.Admin数据
08:31:19.383 12 Y - 开始检查连接[Common/SQLite]的数据库架构……
08:31:19.383 8 W - 一级缓存：关闭缓存
08:31:19.461 12 Y - [Common]的所有实体类（17个）：Sequence,GuidCategory,Administrator,Menu,Role,RoleMenu,Log,Area,User,Simple,SimpleTree,Setting,Statistics,UserProfile,Attachment,Category,Admin
08:31:19.461 12 Y - [Common]需要检查架构的实体类（1个）：Admin
08:31:19.461 12 Y - Common待检查表架构的实体个数：1
08:31:19.554 12 Y - 检查连接[Common/SQLite]的数据库架构耗时00:00:00.1729310
08:31:19.585 8 W - 更新实体缓存（第1次）：NewLife.YWS.Entities.Admin 原因：第一次 Administrator<>.FindByName(String name)<-.Login(String username,String password,Int32 hashTimes)
08:31:19.601 8 W - 完成更新缓存（第1次）：NewLife.YWS.Entities.Admin
08:31:19.601 8 W - 清空实体缓存：NewLife.YWS.Entities.Admin 原因：修改数据后提交事务
08:31:19.632 8 W - 检查实体NewLife.CommonEntity.Log的数据表架构，模式：CheckTableWhenFirstUse
08:31:19.632 8 W - 创建表：Log(日志)
08:31:19.648 8 W - 初始化NewLife.CommonEntity.Log数据
08:31:19.695 12 W - 更新实体缓存（第1次）：NewLife.CommonEntity.Role 原因：第一次 Role<>.FindByID(Int32 id)<-
08:31:19.695 12 W - 检查实体NewLife.CommonEntity.Role的数据表架构，模式：CheckTableWhenFirstUse
08:31:19.695 12 W - 创建表：Role(角色)
08:31:19.695 12 W - 初始化NewLife.CommonEntity.Role数据
08:31:19.710 12 W - 开始初始化Role角色数据……
08:31:19.710 12 W - 完成初始化Role角色数据！
08:31:19.726 12 W - 检查实体NewLife.CommonEntity.RoleMenu的数据表架构，模式：CheckTableWhenFirstUse
08:31:19.726 12 W - 创建表：RoleMenu(角色和菜单)
08:31:19.726 12 W - 初始化NewLife.CommonEntity.RoleMenu数据
08:31:19.726 12 W - 检查实体NewLife.CommonEntity.Menu的数据表架构，模式：CheckTableWhenFirstUse
08:31:19.726 12 W - 创建表：Menu(菜单)
08:31:19.726 12 W - 初始化NewLife.CommonEntity.Menu数据
08:31:19.726 12 W - 开始初始化Menu菜单数据……
08:31:19.741 12 W - 更新实体缓存（第1次）：NewLife.CommonEntity.Menu 原因：第一次 Menu<>.FindByName(String name)<-.FindForName(String name)
08:31:19.741 12 W - 完成更新缓存（第1次）：NewLife.CommonEntity.Menu
08:31:19.804 12 W - 完成初始化Menu菜单数据！
08:31:19.804 12 W - 更新实体缓存（第2次）：NewLife.CommonEntity.Menu 原因：60秒过期 Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)
08:31:19.804 12 W - 完成更新缓存（第2次）：NewLife.CommonEntity.Menu
08:31:19.804 12 W - 开始初始化RoleMenu授权数据……
08:31:19.804 12 W - 更新实体缓存（第2次）：NewLife.CommonEntity.Role 原因：60秒过期 Role<,,>.InitData()<-Entity<>.Meta.WaitForInitData(Int32 millisecondsTimeout)
08:31:19.804 12 W - 完成更新缓存（第2次）：NewLife.CommonEntity.Role
08:31:19.804 12 W - 更新实体缓存（第1次）：NewLife.CommonEntity.RoleMenu 原因：第一次 RoleMenu<>.FindAllByRoleID(Int32 roleID)<-.GrantAll(Int32 roleID,List<Int32> menuIDs)
08:31:19.804 12 W - 完成更新缓存（第1次）：NewLife.CommonEntity.RoleMenu
08:31:19.819 12 W - 完成初始化RoleMenu授权数据！
08:31:19.819 12 W - 完成更新缓存（第2次）：NewLife.CommonEntity.Role
08:31:19.851 12 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
08:31:19.866 12 W - 更新实体缓存（第3次）：NewLife.CommonEntity.Menu 原因：60秒过期 EntityTree<,>.FindParent()<-
08:31:19.866 12 W - 完成更新缓存（第3次）：NewLife.CommonEntity.Menu
08:31:19.866 12 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
08:31:20.459 13 W - 更新实体缓存（第4次）：NewLife.CommonEntity.Menu 原因：60秒过期 Entity<>.FindWithCache(String name,Object value)<-Entity<>.EntityOperate.FindWithCache(String name,Object value)
08:31:20.459 13 W - 完成更新缓存（第4次）：NewLife.CommonEntity.Menu
08:31:20.974 4 W - 清空实体缓存：NewLife.CommonEntity.Menu 原因：修改数据后提交事务
08:31:22.393 8 W - 更新实体缓存（第5次）：NewLife.CommonEntity.Menu 原因：60秒过期 Entity<>.FindWithCache(String name,Object value)<-Entity<>.EntityOperate.FindWithCache(String name,Object value)
08:31:22.393 8 W - 完成更新缓存（第5次）：NewLife.CommonEntity.Menu
08:31:28.539 4 W - 创建表：Customer(客户)
08:31:28.555 4 W - 初始化NewLife.YWS.Entities.Customer数据
08:31:28.586 4 W - 开始检查连接[YWS/SQLite]的数据库架构……
08:31:28.586 4 W - [YWS]的所有实体类（6个）：CustomerType,Record,Maintenance,Feedliquor,Customer,Machine
08:31:28.586 4 W - [YWS]需要检查架构的实体类（6个）：CustomerType,Record,Maintenance,Feedliquor,Customer,Machine
08:31:28.586 4 W - YWS待检查表架构的实体个数：6
08:31:28.586 4 W - 创建表：CustomerType(客户类型)
08:31:28.586 4 W - 创建表：Record(交易记录)
08:31:28.586 4 W - 创建表：Maintenance(维修保养记录)
08:31:28.601 4 W - 创建表：Feedliquor(液料规格)
08:31:28.601 4 W - 创建表：Customer(客户)
08:31:28.601 4 W - 修改表CreateTable失败！SQLite error
table Customer already exists[SQL:
Create Table Customer(
	ID integer Primary Key AUTOINCREMENT,
	No nvarchar(50) NULL COLLATE NOCASE,
	Name nvarchar(50) NULL COLLATE NOCASE,
	Linkman nvarchar(50) NULL COLLATE NOCASE,
	Department nvarchar(50) NULL COLLATE NOCASE,
	Tel nvarchar(50) NULL COLLATE NOCASE,
	Fax nvarchar(50) NULL COLLATE NOCASE,
	Email nvarchar(50) NULL COLLATE NOCASE,
	QQ nvarchar(50) NULL COLLATE NOCASE,
	MSN nvarchar(50) NULL COLLATE NOCASE,
	Address nvarchar(50) NULL COLLATE NOCASE,
	AddTime datetime NULL,
	Remark nvarchar(100) NULL COLLATE NOCASE,
	CustomerTypeID int NULL
)
][DB:YWS/SQLite]
08:31:28.601 4 W - 修改表CreateIndex失败！SQLite error
index Customer_No already exists[SQL:Create Unique Index Customer_No On Customer (No)][DB:YWS/SQLite]
08:31:28.601 4 W - 修改表CreateIndex失败！SQLite error
index Customer_Name already exists[SQL:Create Unique Index Customer_Name On Customer (Name)][DB:YWS/SQLite]
08:31:28.601 4 W - 修改表CreateIndex失败！SQLite error
index Customer_CustomerTypeID already exists[SQL:Create Index Customer_CustomerTypeID On Customer (CustomerTypeID)][DB:YWS/SQLite]
08:31:28.601 4 W - 创建表：Machine(机器零件规格)
08:31:28.601 4 W - 检查连接[YWS/SQLite]的数据库架构耗时00:00:00.0277403
08:31:53.933 2 N - 清空单对象缓存：NewLife.CommonEntity.Setting
08:31:53.933 2 N - System.ObjectDisposedException: 无法访问已释放的对象。
对象名:“SQLiteFactory”。
   在 System.Data.SQLite.SQLiteFactory.CheckDisposed()
   在 System.Data.SQLite.SQLiteFactory.CreateConnection()
   在 XCode.DataAccessLayer.DbSession.get_Conn()
   在 XCode.DataAccessLayer.DbSession.Open()
   在 XCode.DataAccessLayer.FileDbSession.Open()
   在 XCode.DataAccessLayer.DbSession.BeginTransaction()
   在 XCode.DataAccessLayer.DAL.BeginTransaction()
   在 XCode.Entity`1.Meta.BeginTrans()
   在 XCode.Entity`1.DoAction(Func`1 func, Nullable`1 isnew)
   在 XCode.Entity`1.Update()
   在 XCode.Cache.SingleEntityCache`2.<>c__DisplayClass1c.<Clear>b__1b()
   在 XCode.Cache.CacheBase`1.InvokeFill(Func callback)
